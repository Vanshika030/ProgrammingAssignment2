## makeCacheMatrix: This function creates a special "matrix" object
## that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL  # Initialize the inverse property
# Method to set the matrix
set <- function(y) {
x <<- y
inv <<- NULL  # Clear the cached inverse
}
# Method to get the matrix
get <- function() x
# Method to set the inverse of the matrix
setInverse <- function(inverse) inv <<- inverse
# Method to get the inverse of the matrix
getInverse <- function() inv
# Return a list of the methods
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## cacheSolve: This function computes the inverse of the special "matrix"
## returned by makeCacheMatrix. If the inverse has already been calculated
## (and the matrix has not changed), then the cacheSolve should retrieve
## the inverse from the cache.
cacheSolve <- function(x, ...) {
inv <- x$getInverse()  # Attempt to get the cached inverse
# If the inverse is already calculated, return it
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
# Get the matrix from our object
data <- x$get()
# Calculate the inverse using solve function
inv <- solve(data, ...)
# Set the inverse to the object
x$setInverse(inv)
# Return the inverse
inv
}
